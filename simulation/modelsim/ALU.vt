// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/06/2020 13:39:55"
                                                                                
// Verilog Test Bench template for design : ALU
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ps
module ALU_vlg_tst();
// constants                                           
// general purpose registers
reg eachvec;
// test vector input registers
reg [31:0] A;
reg [3:0] ALUop;
reg [31:0] B;
reg [4:0] Sa;
// wires                                               
wire [31:0]  C;
wire V;

// assign statements (if any)                          
ALU i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.ALUop(ALUop),
	.B(B),
	.C(C),
	.Sa(Sa),
	.V(V)
);
integer fp_r, fp_w, count;
reg[31:0] C_correct;
reg V_correct;

initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin      

C_correct = 0;
V_correct = 0;
count = 0;
fp_r = $fopen("test_vectors/alu_test_vector.txt", "r");       
fp_w = $fopen("test_vectors/alu_test_result.txt", "w");
                                            
// --> end                                             
$display("Running testbench");                       
end                                                    

reg clk;
initial begin
	clk = 0;
	forever
	#(1) clk = ~clk;
end


always@(posedge clk) begin
	if(count < 1824) begin
		$fscanf(fp_r, "%d %d %d %d %d %d", ALUop, Sa, A, B, C_correct, V_correct);
		count = count + 1;
	end
	else begin
		$fclose(fp_r);
	end
end

always@(negedge clk)begin
		//输出文件
		if(count < 1824) begin
			if(C == C_correct && V == V_correct)
				$fwrite(fp_w, "pass\n");
			else
				$fwrite(fp_w, "fail\n");
		end
		else
			$fclose(fp_w);
end                                          
endmodule

