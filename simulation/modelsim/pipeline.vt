// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "08/17/2020 15:37:32"
                                                                                
// Verilog Test Bench template for design : pipeline
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ns/ 1 ps
module pipeline_vlg_tst();
reg clk;
reg [31:0] const_4;
reg rst_n;
reg [4:0] zero;
// wires                                               

// assign statements (if any)                          
pipeline i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.const_4(const_4),
	.rst_n(rst_n),
	.zero(zero)
);
initial begin
	clk = 0;
	const_4 = 4;
	rst_n = 0;
	zero = 0;
	$readmemh("test_files/asm/fibonacci_rom.txt", i1.b2v_inst1.memory);//检测斐波那契程序
	//$readmemh("test_files/asm/binarySearch_rom.txt", i1.b2v_inst1.memory);//二分查找算法
	
	#(100) rst_n = 1;
end

always begin
	#(1)
	if(i1.b2v_inst.pc_out == 140)//fibo设为140, bina设为252
		clk = 0;
	else
		clk = ~clk;
end

always@(negedge clk) begin
	if(i1.b2v_inst.pc_out == 140) begin//fibo设为140, bina设为252
		//检测斐波那契
		$writememh("test_files/asm/results/fibonacci_reg_Pipelineresult.txt", i1.b2v_inst8.registers);
		$writememh("test_files/asm/results/fibonacci_mem_Pipelineresult.txt", i1.b2v_inst28.mem, 0, 250);
		//二分查找算法
		//$writememh("test_files/asm/results/binary_reg_Pipelineresult.txt", i1.b2v_inst8.registers);
		//$writememh("test_files/asm/results/binary_mem_Pipelineresult.txt", i1.b2v_inst28.mem, 0, 350);
	end

end

                                             
endmodule

